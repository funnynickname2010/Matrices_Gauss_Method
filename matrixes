#include <iostream>
#include <cmath>

#define FTYPE double

using namespace std;
void matrix_input(FTYPE** m, FTYPE** copy_m, int row, int col);
void matrix_print(FTYPE** m, int row, int col);
void gauss_method(FTYPE** m, int row, int col);
void row_swap(FTYPE*& row1, FTYPE*& row2);
void row_division(FTYPE*& row, FTYPE scalar, int row_length);
void row_substraction_row2_row1(FTYPE*& row1, FTYPE*& row2, int col);
void row_multiplication_true(FTYPE*& row, FTYPE scalar, int row_length);
FTYPE* row_multiplication_return(FTYPE* row, FTYPE scalar, int row_length);

int main()
{
int row, col;
FTYPE** m;
FTYPE** copy_m;


//input rows, columns

cout << "Rows: \n";
cin >> row;
cout << "Columns: \n";
cin >> col;
cout << "\n";


//memory allocation

m = (new FTYPE * [row]);
copy_m = (new FTYPE * [row]);

for (int i = 0; i < row; i++)
{
m[i] = (new FTYPE[col]());
copy_m[i] = (new FTYPE[col]());
}

//input matrix

matrix_input(m, copy_m, row, col);
cout << "\n";
matrix_print(m, row, col);

//gauss

gauss_method(m, row, col);

matrix_print(m, row, col);
//FTYPE a = m[0][0];
//cout << a;

return 0;
}

void matrix_input(FTYPE** m, FTYPE** copy_m, int row, int col)
{
for (int i = 0; i < row; i++)
{
for (int j = 0; j < col; j++)
{
cin >> m[i][j];
**copy_m = m[i][j];
}
}
}

void matrix_print(FTYPE** m, int row, int col)
{
for (int i = 0; i < row; i++)
{
for (int j = 0; j < col; j++)
{
cout << m[i][j] << " ";
}
cout << "\n";
}
cout << "\n";
}

void gauss_method(FTYPE** m, int row, int col)
{
int rows_done = -1;

for (int k = 0; k < col; k++)
{
int one_flag = -1;

for (int i = rows_done + 1; i < row; i++)
{
cout << "\n";
cout << m[i][k];
cout << "\n\n";
if (m[i][k] != 0)
{
matrix_print(m, row, col);
row_division(m[i], m[i][k], col);
one_flag = i;

for (int j = i + 1; j < row; j++)
{
if (m[i][j] != 0)
{
FTYPE* new_row = row_multiplication_return(m[i], m[j][k], col);
row_substraction_row2_row1(new_row, m[j], col);
}
}
matrix_print(m, row, col);
}
}

matrix_print(m, row, col);
row_swap(m[one_flag], m[(rows_done + 1)]);
//matrix_print(m, row, col);

if (one_flag != -1)
{
rows_done += 1;
}
}
//matrix_print(m, row, col);
}

void row_swap(FTYPE*& row1, FTYPE*& row2)
{
FTYPE* buffer = row1;

row1 = row2;
row2 = buffer;
}

void row_division(FTYPE*& row, FTYPE scalar, int row_length)
{
for (int i = 0; i < row_length; i++)
{
row[i] = row[i] / scalar;
}
}

void row_multiplication_true(FTYPE*& row, FTYPE scalar, int row_length)
{
for (int i = 0; i < row_length; i++)
{
row[i] = row[i] * scalar;
}
}

FTYPE* row_multiplication_return(FTYPE* row, FTYPE scalar, int row_length)
{
for (int i = 0; i < row_length; i++)
{
row[i] = row[i] * scalar;
}
return row;
}

void row_substraction_row2_row1(FTYPE*& row1, FTYPE*& row2, int col)
{
for (int i = 0; i < col; i++)
{
row2[i] = row2[i] - row1[i];
}
}
